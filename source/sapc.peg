%prefix "sapc"
%header {
      #include "context.h"
}
%source {
      static int re_next(struct reParseContext* ctx) {
            if (ctx->loc.position >= ctx->length)
                  return -1;

            return ctx->source[ctx->loc.position++];
      }

      #define PCC_GETCHAR(state) re_next((state))
      #define PCC_ERROR(auxil) reError((auxil)->state, (auxil)->loc)
      #define RE_STATE (auxil->state)
      #define RE_LOC (auxil->loc)
}
%auxil "struct reParseContext*"
%value "struct reID"

# file
file <- ( _ statement )* _ ~{ reError((auxil)->state, (auxil)->loc); }
statement <- ( attrdef / typedef / import / include )

# import/include
import <- 'import' _ f:identifier _ ';' { reImport(RE_STATE, f, RE_LOC); }
include <- 'include' _ p:string space? comment? { reInclude(RE_STATE, p, RE_LOC); } eol

# values
value <- v:number { $$ = v; } / v:string { $$ = v; } / v:true { $$ = v; } / v:false { $$ = v; } / v:null { $$ = v; }
number <- <'-'? [0-9]+> { $$ = rePushNumber(RE_STATE, $1); }
string <- '"' <[^"\n]*> '"' { $$ = rePushString(RE_STATE, $1); }
true <- 'true' { $$ = rePushBoolean(RE_STATE, 1); }
false <- 'false' { $$ = rePushBoolean(RE_STATE, 0); }
null <- 'null' { $$ = rePushNull(RE_STATE); }

# common
_ <- ( space / comment? eol )*
eol <- '\n' { auxil->loc.line++; }
space <- [ \t]+
comment <- '#' [^\n]*
identifier <- <[a-zA-Z_][a-zA-Z0-9_]*> { $$ = rePushIdentifier(RE_STATE, $1); }
initializer <- _ '=' _ v:value { $$ = v; } / { $$ = RE_NONE; }

# attribute definitions
attrdef <- 'attribute' _ n:identifier _ ( '{' (_ attrparam )* _ '}' / ';' ) { rePushAttributeDefinition(RE_STATE, n, RE_LOC); }
attrparam <- t:identifier _ n:identifier v:initializer _ ';' { rePushAttributeParam(RE_STATE, t, n, v, RE_LOC); }

# attributes
attributes <- ( '[' _ attribute ( _ ',' _ attribute )* _ ']' )+
attribute <- n:identifier ( _ '(' _ ( attrarg ( _ ',' _ attrarg )* )? _ ')' )? { rePushAttribute(RE_STATE, n, RE_LOC); }
attrarg <- v:value { rePushAttributeArgument(RE_STATE, v); }

# types
typedef <- attributes? { rePushAttributeSet(RE_STATE); } _ 'type' _ n:identifier _ b:typebase? _ ( '{' ( _ field )* _ '}' / ';' ) { rePushTypeDefinition(RE_STATE, n, b, RE_LOC); }
typebase <- ':' _ n:identifier { $$ = n; } / { $$ = RE_NONE; }
field <- attributes? { rePushAttributeSet(RE_STATE); } _ t:identifier _ n:identifier v:initializer _ ';' { rePushField(RE_STATE, t, n, v, RE_LOC); }
