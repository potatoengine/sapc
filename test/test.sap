# file header comment

use message : struct;

// test import
import common;

[tag("Test Tag")]
module test;

attribute default { any value = 0; } /* default attribute */

[cxxname("int*")]
using intptr;

struct Vec {
    float x = 0;
    float y = 0;
}

using Vec2 = Vec;

struct List<T> {
    T[] items;
    int count = 0;
}

const Vec zero = { 0, 0 };
const Vec right = { 1, 0 };
const Vec up = { 0, 1 };

namespace ns {
    [name("Test")]
    struct test {
        [default]
        int x = 0 # a comment
        ;
        string y = "y"; // C++-style comment
        [ignore, name("fail")]
        /*
            C-style block comment
        */
        bool skipme = false;
        intptr iptr = null;
        string[] array = { "first", "second", "third" };
        bool[] bits = {{}};
        Vec2*[] vecPtrs;
    }

    using alias = test;

    namespace data {
        const int one = 1;
        const List<int> numbers = {{1,2,3}, 3};
        const List<string> names = {{"Anne", "Bob", "Ayo"}, 3};
    }
}

union number {
    int i;
    float f;
}

[cxxnamespace("st_msg")]
message ack {
    int time;
}

[forward(Vec)]
struct derived : ns.test {
    int init = ns.data.one;
}

enum order {
    first, second, third
}

struct ordered {
    order position = order.second;
}
